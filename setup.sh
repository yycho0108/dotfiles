#!/bin/bash
#
# Command to generate: argbash .setup.sh.tmpl -o setup.sh
#
# ARG_OPTIONAL_BOOLEAN([unsafe],[u],[Unsafe mode],[off])
# ARG_HELP([Setup dotfiles in a new machine by installing symlinked config files.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='uh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_unsafe="off"


print_help()
{
	printf '%s\n' "Setup dotfiles in a new machine by installing symlinked config files."
	printf 'Usage: %s [-u|--(no-)unsafe] [-h|--help]\n' "$0"
	printf '\t%s\n' "-u, --unsafe, --no-unsafe: Unsafe mode (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-u|--no-unsafe|--unsafe)
				_arg_unsafe="on"
				test "${1:0:5}" = "--no-" && _arg_unsafe="off"
				;;
			-u*)
				_arg_unsafe="on"
				_next="${_key##-u}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-u" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

UNSAFE="${_arg_unsafe}"

list_dotfiles(){
    # NOTE(ycho): Find repository in a somewhat robust manner.
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    DIR="$(readlink -f $DIR)"

    #find . -maxdepth 1 -type f -name '\.*' -exec sh -c '
    #for f do
    #    git check-ignore -q "$f" || echo $f
    #done
    #' find-sh {} +

    echo "${DIR}/.bashrc"
    echo "${DIR}/.vimrc"
    echo "${DIR}/.inputrc"
    echo "${DIR}/.python_startup.py"
}

RMI="always"
case "${UNSAFE}" in
    on) RMI="never" ;;
    *) RMI="always" ;;
esac

for SRC in $(list_dotfiles); do
    DST="$HOME/$(basename ${SRC})"
    if [ -f "${DST}" ]; then
        rm --interactive="${RMI}" "${DST}"
    fi
    ln -sv "$(realpath ${SRC})" "${DST}"
done

# ] <-- needed because of Argbash
