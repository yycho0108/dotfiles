#!/bin/bash
#
# Command to generate: argbash .svgz2png.sh -o make-gif
#
# ARG_OPTIONAL_SINGLE([tmp-file],[t],[Enable verbose output],["/tmp/tmp.svg"])

# ARG_POSITIONAL_SINGLE([in-file],[Input file.],[])
# ARG_POSITIONAL_SINGLE([out-file],[Output file.],["/tmp/out.png"])

# ARG_HELP([SVGZ to PNG])

# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='th'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_out_file="/tmp/out.png"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_tmp_file="/tmp/tmp.svg"


print_help()
{
	printf '%s\n' "SVGZ to PNG"
	printf 'Usage: %s [-t|--tmp-file <arg>] [-h|--help] <in-file> [<out-file>]\n' "$0"
	printf '\t%s\n' "<in-file>: Input file."
	printf '\t%s\n' "<out-file>: Output file. (default: '"/tmp/out.png"')"
	printf '\t%s\n' "-t, --tmp-file: Enable verbose output (default: '"/tmp/tmp.svg"')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--tmp-file)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tmp_file="$2"
				shift
				;;
			--tmp-file=*)
				_arg_tmp_file="${_key##--tmp-file=}"
				;;
			-t*)
				_arg_tmp_file="${_key##-t}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'in-file'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_in_file _arg_out_file "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


set -ex

IN_FILE="${_arg_in_file}"
OUT_FILE="${_arg_out_file}"
TMP_FILE="${_arg_tmp_file}"

gzip -cdf "${IN_FILE}" -S gz > "${TMP_FILE}"
inkscape \
    --batch-process \
    --actions="FitCanvasToDrawing;FileSave;export-filename:${OUT_FILE};export-do;FileClose" \
    "${TMP_FILE}" 2>/dev/null
rm "${TMP_FILE}"

# ] <-- needed because of Argbash
