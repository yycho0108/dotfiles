#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_BOOLEAN([verbose],[v],[Enable verbose output],[off])
# ARG_OPTIONAL_BOOLEAN([interactive],[i],[Enable interactive verification],[off])
# ARG_OPTIONAL_SINGLE([fps],[r],[GIF frame rate.],[30])
# ARG_OPTIONAL_SINGLE([width],[w],[GIF width, same if negative (height is computed from aspect ratio)],["-1"])
# ARG_OPTIONAL_SINGLE([skip],[s],[Frame skip step size],[1])

# ARG_POSITIONAL_SINGLE([in-file],[Input file.],[])
# ARG_POSITIONAL_SINGLE([out-file],[Output file.],["/tmp/output.gif"])

# ARG_HELP([Generate GIF from video-like media from ffmpeg.])

# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='virwsh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_out_file="/tmp/output.gif"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose="off"
_arg_interactive="off"
_arg_fps="30"
_arg_width="-1"
_arg_skip="1"


print_help()
{
	printf '%s\n' "Generate GIF from video-like media from ffmpeg."
	printf 'Usage: %s [-v|--(no-)verbose] [-i|--(no-)interactive] [-r|--fps <arg>] [-w|--width <arg>] [-s|--skip <arg>] [-h|--help] <in-file> [<out-file>]\n' "$0"
	printf '\t%s\n' "<in-file>: Input file."
	printf '\t%s\n' "<out-file>: Output file. (default: '"/tmp/output.gif"')"
	printf '\t%s\n' "-v, --verbose, --no-verbose: Enable verbose output (off by default)"
	printf '\t%s\n' "-i, --interactive, --no-interactive: Enable interactive verification (off by default)"
	printf '\t%s\n' "-r, --fps: GIF frame rate. (default: '30')"
	printf '\t%s\n' "-w, --width: GIF width, same if negative (height is computed from aspect ratio) (default: '"-1"')"
	printf '\t%s\n' "-s, --skip: Frame skip step size (default: '1')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-v|--no-verbose|--verbose)
				_arg_verbose="on"
				test "${1:0:5}" = "--no-" && _arg_verbose="off"
				;;
			-v*)
				_arg_verbose="on"
				_next="${_key##-v}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-i|--no-interactive|--interactive)
				_arg_interactive="on"
				test "${1:0:5}" = "--no-" && _arg_interactive="off"
				;;
			-i*)
				_arg_interactive="on"
				_next="${_key##-i}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-r|--fps)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fps="$2"
				shift
				;;
			--fps=*)
				_arg_fps="${_key##--fps=}"
				;;
			-r*)
				_arg_fps="${_key##-r}"
				;;
			-w|--width)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_width="$2"
				shift
				;;
			--width=*)
				_arg_width="${_key##--width=}"
				;;
			-w*)
				_arg_width="${_key##-w}"
				;;
			-s|--skip)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_skip="$2"
				shift
				;;
			--skip=*)
				_arg_skip="${_key##--skip=}"
				;;
			-s*)
				_arg_skip="${_key##-s}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'in-file'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_in_file _arg_out_file "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


VERBOSE="${_arg_verbose}"
INTERACTIVE="${_arg_interactive}"
FPS="${_arg_fps}"
WIDTH="${_arg_width}"
SKIP="${_arg_skip}"
INFILE="${_arg_in_file}"
OUTFILE="${_arg_out_file}"
PALETTE="/tmp/palette.png";

FFMPEG_ARGS=()
if [ ${INTERACTIVE} != "on" ]; then
    FFMPEG_ARGS+=(-y)
fi

if [ ${VERBOSE} != "on" ]; then
    FFMPEG_ARGS+=(-hide_banner)
    FFMPEG_ARGS+=(-loglevel warning)
fi

# INWIDTH="$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of csv=s=x:p=0 ${INFILE})"
# WIDTH="${WIDTH-${INWIDTH--1}}"
echo "WIDTH = ${WIDTH}"

if [ ${VERBOSE} != "on" ]; then
    echo "Generating palette ...";
fi
ffmpeg -i "${INFILE}" -vf fps=${FPS},scale=${WIDTH}:-1:flags=lanczos,palettegen "${PALETTE}" "${FFMPEG_ARGS[@]}";

if [ ${VERBOSE} != "on" ]; then
    echo "Generating GIF ...";
fi
ffmpeg -i "${INFILE}" -loop 0 -i ${PALETTE} -lavfi "select='not(mod(n\,${SKIP}))',setpts=N/TB/${FPS},scale=${WIDTH}:-1:flags=lanczos,paletteuse" -r "${FPS}" "${OUTFILE}" "${FFMPEG_ARGS[@]}"

if [ ${VERBOSE} != "on" ]; then
    echo "Removing palette ..."
fi

RM_ARGS=()
if [ ${INTERACTIVE} == "on" ]; then
    RM_ARGS+=(-i)
fi
rm "${PALETTE}" "${RM_ARGS[@]}"

# ] <-- needed because of Argbash
